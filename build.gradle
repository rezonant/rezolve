buildscript {
    repositories {
        jcenter()
        maven { url = "https://maven.minecraftforge.net" }
        maven { url = 'https://maven.parchmentmc.org' }
        maven { url = 'https://maven.moddingx.org' }

    }
    dependencies {
        classpath 'org.spongepowered:mixingradle:0.7.+'
        classpath 'org.moddingx:ModGradle:3.0.+'
    }
}

plugins {
    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'com.matthewprenger.cursegradle' version '1.4.0'
    id "com.modrinth.minotaur" version "2.+"
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'org.moddingx.modgradle.mapping'

def locals = new Properties()
if (rootProject.file("local.properties").exists())
    locals.load(rootProject.file("local.properties").newDataInputStream())

configurations {
    compile.extendsFrom exportedCompile
}

ext.buildnumber = 0
if (System.getenv('BUILD_NUMBER') != null) {
    project.buildnumber = System.getenv('BUILD_NUMBER');
} else if (System.getenv('CIRCLE_BRANCH') != null && System.getenv('CIRCLE_BRANCH') == 'master') {
    // master (official releases)
    project.buildnumber = System.getenv('CIRCLE_BUILD_NUM');
} else {
    try {
        ext.buildnumber += "_" + "git rev-parse --abbrev-ref HEAD".execute().text.trim();
        ext.buildnumber += "_" + "git rev-parse --short HEAD".execute().text.trim();
    } catch (all) {}
    logger.lifecycle "No build number detected, setting to ${ext.buildnumber}"
}

version = "${mod_version}.${buildnumber}"
group = "dev.rezonant.rezolve" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "Rezolve-${minecraft_version}"

java.toolchain.languageVersion = JavaLanguageVersion.of("${java_version}")
println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"

repositories {
    maven { url = "https://maven.minecraftforge.net" } // Forge
    maven { url "https://dvs1.progwml6.com/files/maven" } // JEI
    maven { url = "https://modmaven.dev/" } // AE2
    maven { url 'https://maven.blamejared.com' } // Patchouli


    // Temp for TOP, https://github.com/McJtyMods/TheOneProbe/issues/506
    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }

//    maven { url = "http://chickenbones.net/maven" }
//    maven { url = "http://mobiusstrip.eu/maven" }
//    maven { url = "http://dl.tsr.me/artifactory/libs-release-local" }
//    maven { url = "http://maven.tterrag.com" }
//    maven { url = "http://dvs1.progwml6.com/files/maven" }
//    maven { url = "http://maven.cil.li/" }
//    maven { url = "http://maven.ic2.player.to" }
//    maven { url = "http://maven.epoxide.xyz" }
    mavenLocal()
}

jarJar.enable()

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
    compileOnly 'org.jetbrains:annotations:23.0.0'

    // MODS ---------------

    compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}")
    compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}-forge-api:${jei_version}")
    runtimeOnly fg.deobf("mezz.jei:jei-${minecraft_version}-common:${jei_version}")
    runtimeOnly fg.deobf("mezz.jei:jei-${minecraft_version}-forge:${jei_version}")
    compileOnly "appeng:appliedenergistics2:12.7.0:api"
    runtimeOnly fg.deobf("appeng:appliedenergistics2:12.7.0")
    implementation fg.deobf("curse.maven:the-one-probe-245211:${top_version}")
    compileOnly fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}:api")
    runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}")
    runtimeOnly fg.deobf("curse.maven:mekanism-268560:${mekanism_version}")
}

mixin {
    add sourceSets.main, 'rezolve.refmap.json'
    config 'rezolve.mixins.json'
}

minecraft {
    mappings channel: mappings_channel, version: mappings_version
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')
            // jvmArg "-XX:+AllowEnhancedClassRedefinition" // needed for JBR (full hotswap support)
            //property 'forge.logging.markers', 'REGISTRIES' // lots of registry debugging!
            property 'forge.logging.console.level', 'debug' // https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            mods {
                rezolve {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                rezolve {
                    source sourceSets.main
                }
            }
        }
    }
}

println "Keys: " + locals.keys().asIterator().toList().join(", ")

if (System.getenv("CURSEFORGE_KEY") != null || locals.containsKey('curseforge_key')) {
    println "Curseforge: Enabled"

    curseforge {
        apiKey = System.getenv("CURSEFORGE_KEY") ?: locals.get("curseforge_key")

        project {
            id = '271980'
            changelog = 'CHANGELOG'
            releaseType = "${release_type}"

            mainArtifact(jar) {
                relations {
                    optionalDependency "jei"
                }
            }

            //addArtifact apiJar.get() // <-- when we have an API to add
            addGameVersion "Java ${java_version}"
            addGameVersion "${minecraft_version}"
        }
    }
} else {
    println "Curseforge: Disabled"
}


if (System.getenv("MODRINTH_TOKEN") != null || locals.containsKey('modrinth_token')) {
    println "Modrinth: Enabled"

    tasks.named('modrinth').configure {
        dependsOn(jar)
    }

    modrinth {
        token = System.getenv("MODRINTH_TOKEN") ?: locals.get("modrinth_token")
        projectId = "${modrinth_id}"

        syncBodyFrom = rootProject.file("README.md").text

        versionType = "${release_type}"
        // changelog =
        uploadFile = jar

        dependencies {
        }
    }
} else {
    println "Modrinth: Disabled"
}
